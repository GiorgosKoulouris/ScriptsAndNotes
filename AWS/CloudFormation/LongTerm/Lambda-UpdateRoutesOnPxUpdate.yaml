AWSTemplateFormatVersion: "2010-09-09"
Description: "Deploys a Lambda function to update VPC peering routes."

Parameters:
  OrgIdentifier:
    Type: AWS::SSM::Parameter::Value<String>
    Default: /org/account-name
    Description: Identifier used for naming resources. Defaults to SSM parameter

  RetentionPolicy:
    Type: String
    AllowedValues: [Delete, Retain]
    Default: Delete
    Description: Retention policy for stack resources

Resources:
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    DeletionPolicy: !Ref RetentionPolicy
    Properties:
      RoleName: !Sub "${OrgIdentifier}-SVC-LambdaRouteModifier"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: !Sub "${OrgIdentifier}-SVC-LambdaRouteModifier-Policy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - ec2:DescribeRouteTables
                  - ec2:CreateRoute
                  - ec2:DeleteRoute
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: "*"

  RouteUpdateLambda:
    Type: AWS::Lambda::Function
    DeletionPolicy: !Ref RetentionPolicy
    Properties:
      FunctionName: !Sub "${OrgIdentifier}-UpdateRoutes-On-PeeringUpdate"
      Runtime: python3.11
      Handler: index.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Timeout: 30
      Code:
        ZipFile: |
          import json
          import boto3
          import cfnresponse

          ec2 = boto3.client("ec2")

          def get_route_tables(vpc_id):
              """Retrieve all route table IDs for a given VPC."""
              route_tables = ec2.describe_route_tables(
                  Filters=[{"Name": "vpc-id", "Values": [vpc_id]}]
              )
              return [rt["RouteTableId"] for rt in route_tables["RouteTables"]]

          def handler(event, context):
              print("Received event:", json.dumps(event, indent=2))

              response_data = {}
              status = cfnresponse.SUCCESS

              try:
                  props = event["ResourceProperties"]
                  vpc1_id = props["VPC1Id"]
                  vpc2_id = props["VPC2Id"]
                  vpc1_cidr = props["VPC1CIDR"]
                  vpc2_cidr = props["VPC2CIDR"]
                  peering_connection_id = props["VpcPeeringConnectionId"]
                  vpc2_account_id = props["VPC2AccountId"]
                  vpc2_region = props["VPC2Region"]
                  
                  same_account = event["StackId"].split(":")[4] == vpc2_account_id
                  same_region = event["StackId"].split(":")[3] == vpc2_region

                  if event["RequestType"] in ["Create", "Update"]:
                      route_tables_vpc1 = get_route_tables(vpc1_id)
                      for route_table_id in route_tables_vpc1:
                          ec2.create_route(
                              RouteTableId=route_table_id,
                              DestinationCidrBlock=vpc2_cidr,
                              VpcPeeringConnectionId=peering_connection_id
                          )

                      if same_account and same_region:
                          route_tables_vpc2 = get_route_tables(vpc2_id)
                          for route_table_id in route_tables_vpc2:
                              ec2.create_route(
                                  RouteTableId=route_table_id,
                                  DestinationCidrBlock=vpc1_cidr,
                                  VpcPeeringConnectionId=peering_connection_id
                              )

                  elif event["RequestType"] == "Delete":
                      route_tables_vpc1 = get_route_tables(vpc1_id)
                      for route_table_id in route_tables_vpc1:
                          ec2.delete_route(
                              RouteTableId=route_table_id,
                              DestinationCidrBlock=vpc2_cidr
                          )

                      if same_account and same_region:
                          route_tables_vpc2 = get_route_tables(vpc2_id)
                          for route_table_id in route_tables_vpc2:
                              ec2.delete_route(
                                  RouteTableId=route_table_id,
                                  DestinationCidrBlock=vpc1_cidr
                              )

              except Exception as e:
                  print("Error:", str(e))
                  status = cfnresponse.FAILED
                  response_data["Error"] = str(e)

              cfnresponse.send(event, context, status, response_data)

Outputs:
  LambdaFunctionArn:
    Description: "ARN of the deployed Lambda function"
    Value: !GetAtt RouteUpdateLambda.Arn
    Export:
      Name: VPCPeeringRouteUpdaterArn
