AWSTemplateFormatVersion: '2010-09-09'
Description: 'SSM Automation Runbook for AMI creation and a lambda to periodically delete outdated AMIs'

Parameters:
  OrgIdentifier:
    Type: AWS::SSM::Parameter::Value<String>
    Default: /org/account-name
    Description: Identifier used for naming resources. Defaults to SSM parameter
  RetentionPolicy:
    Type: String
    AllowedValues: [Delete, Retain]
    Default: Delete
    Description: Retention policy for stack resources

Resources:
  EC2SnapshotsRole:
      Type: AWS::IAM::Role
      DeletionPolicy: !Ref RetentionPolicy
      Properties:
        RoleName: !Sub "${OrgIdentifier}-SVC-EC2Snapshots"
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - ssm.amazonaws.com
                  - lambda.amazonaws.com
              Action:
                - sts:AssumeRole
        Policies:
          - PolicyName: !Sub "${OrgIdentifier}-SVC-EC2Snapshots-Policy"
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Effect: Allow
                  Action:
                    - "ec2:CreateImage"
                    - "ec2:DescribeInstances"
                    - "ec2:DescribeImages"
                    - "ec2:CreateTags"
                    - "ec2:DescribeSnapshots"
                    - "ec2:DescribeVolumes"
                    - "logs:CreateLogGroup"
                    - "logs:CreateLogStream"
                    - "logs:PutLogEvents"
                  Resource: "*"
                - Effect: Allow
                  Action: 
                    - ec2:DeregisterImage
                    - ec2:DeleteSnapshot
                  Resource: "*"
                  Condition:
                    StringEquals:
                      ec2:ResourceTag/ScheduledForDelete: "True"

  SsmAutomationDocument:
    Type: AWS::SSM::Document
    DeletionPolicy: !Ref RetentionPolicy
    Properties:
      DocumentType: Automation
      Name: !Sub "${OrgIdentifier}-EC2-AdHocSnapshots"
      Content:
        schemaVersion: '0.3'
        description: Creates AMIs for selected EC2 instances.
        parameters:
          InstanceID:
            type: AWS::EC2::Instance::Id
            description: Select EC2 instances to operate on.
          DaysToKeep:
            type: Integer
            description: Number of days to keep the AMI before deletion.
          Reason:
            type: String
            description: Reason for creating the AMI.
        assumeRole: !GetAtt EC2SnapshotsRole.Arn
        mainSteps:
          - description: Creates AMIs for the specified instances without rebooting in parallel.
            name: CreateAMI
            action: aws:executeScript
            timeoutSeconds: 1800
            isEnd: true
            inputs:
              Runtime: python3.11
              Handler: main
              InputPayload:
                InstanceID: '{{InstanceID}}'
                Reason: '{{Reason}}'
                DaysToKeep: '{{DaysToKeep}}'
              Script: |
                import boto3
                from datetime import datetime
                import time


                def create_ami(instance_id, reason, days_to_keep):
                    ec2 = boto3.client("ec2")
                    instance_desc = ec2.describe_instances(InstanceIds=[instance_id])
                    instance_name = next(
                        (
                            tag["Value"]
                            for tag in instance_desc["Reservations"][0]["Instances"][0]["Tags"]
                            if tag["Key"] == "Name"
                        ),
                        "UnnamedInstance",
                    )

                    if instance_name == "":
                        instance_name = instance_id

                    timestamp = datetime.now().strftime("%Y%m%d-%H%M%S")

                    image_nameTag = f"{instance_name}_{reason}"
                    image_name = f"{image_nameTag}_{timestamp}"
                    response = ec2.create_image(InstanceId=instance_id, Name=image_name, NoReboot=True)
                    image_id = response["ImageId"]

                    ec2.create_tags(
                        Resources=[image_id],
                        Tags=[
                            {"Key": "Name", "Value": image_nameTag},
                            {"Key": "ScheduledForDelete", "Value": "True"},
                            {"Key": "DaysToKeep", "Value": str(days_to_keep)},
                        ],
                    )

                    return image_id


                def tagSnapshots(ami_id, days_to_keep):
                    ec2 = boto3.client("ec2")

                    image = ec2.describe_images(ImageIds=[ami_id])["Images"][0]

                    for block_device in image.get("BlockDeviceMappings", []):
                        if "Ebs" in block_device:
                            snapshot_id = block_device["Ebs"]["SnapshotId"]

                            source_volume_id = ec2.describe_snapshots(SnapshotIds=[snapshot_id])[
                                "Snapshots"
                            ][0]["VolumeId"]

                            source_volume_tags = ec2.describe_volumes(VolumeIds=[source_volume_id])[
                                "Volumes"
                            ][0].get("Tags", [])
                            
                            source_volume_name = None
                            for tag in source_volume_tags:
                                if tag["Key"] == "Name":
                                    source_volume_name = tag["Value"]

                            if source_volume_name != None:
                                ec2.create_tags(
                                    Resources=[snapshot_id],
                                    Tags=[
                                        {"Key": "Name", "Value": source_volume_name},
                                        {"Key": "ScheduledForDelete", "Value": "True"},
                                        {"Key": "DaysToKeep", "Value": str(days_to_keep)},
                                    ],
                                )
                            else:
                                ec2.create_tags(
                                    Resources=[snapshot_id],
                                    Tags=[
                                        {"Key": "ScheduledForDelete", "Value": "True"},
                                        {"Key": "DaysToKeep", "Value": str(days_to_keep)},
                                    ],
                                )
                    return


                def main(event, context):
                    instance_id = event["InstanceID"]
                    reason = event["Reason"]
                    days_to_keep = str(event["DaysToKeep"])
                    image_id = create_ami(instance_id, reason, days_to_keep)
                    time.sleep(15)
                    tagSnapshots(image_id, days_to_keep)
                    return {"AMI_ID": image_id}

            outputs:
              - Name: CreatedAMI
                Selector: $.Payload.AMI_ID
                Type: String

  AmiCleanupLambda:
      Type: AWS::Lambda::Function
      DeletionPolicy: !Ref RetentionPolicy
      Properties:
        FunctionName: !Sub "${OrgIdentifier}-EC2Snapshots-Cleanup"
        Runtime: python3.11
        Handler: index.delete_old_amis
        Role: !GetAtt EC2SnapshotsRole.Arn
        Timeout: 900
        Code:
          ZipFile: |
            import boto3
            import datetime
            import time

            def delete_old_amis(event, context):
                ec2_client = boto3.client('ec2')

                # Get all AMIs owned by the account
                response = ec2_client.describe_images(
                    Owners=['self'],
                    Filters=[
                        {
                            'Name': 'tag:ScheduledForDelete',
                            'Values': ['True']
                        }
                    ]
                )
                for image in response['Images']:
                    ami_id = image['ImageId']
                    creation_date = image['CreationDate']  # Format: YYYY-MM-DDTHH:MM:SS.SSSZ
                    creation_date = datetime.datetime.strptime(creation_date, "%Y-%m-%dT%H:%M:%S.%fZ")

                    # Get AMI tags
                    tags = {tag['Key']: tag['Value'] for tag in image.get('Tags', [])}
                    
                    if tags.get('ScheduledForDelete') != 'True':
                        continue  # Skip AMIs that aren't marked for deletion

                    days_to_keep = int(tags.get('DaysToKeep', 30))  # Default to 30 if not present
                    expiration_date = creation_date + datetime.timedelta(days=days_to_keep)
                    time_now = datetime.datetime.now(datetime.timezone.utc)
                    time_now = time_now.replace(tzinfo=None, microsecond=0)
                    if time_now >= expiration_date:
                        print(f"Deleting AMI: {ami_id} (Created: {creation_date}, Expired: {expiration_date})")

                        # Deregister AMI
                        ec2_client.deregister_image(ImageId=ami_id)
                        time.sleep(5)
                        
                        # Get associated snapshots
                        for block_device in image.get('BlockDeviceMappings', []):
                            if 'Ebs' in block_device:
                                snapshot_id = block_device['Ebs']['SnapshotId']
                                print(f"Deleting snapshot: {snapshot_id}")
                                ec2_client.delete_snapshot(SnapshotId=snapshot_id)

            if __name__ == "__main__":
                delete_old_amis(None, None)

  PeriodicTrigger:
    Type: AWS::Events::Rule
    DeletionPolicy: !Ref RetentionPolicy
    Properties:
      Name: !Sub "${OrgIdentifier}-LambdaTrigger-EC2SnapshotsCleanup"
      ScheduleExpression: "rate(1 day)"
      State: "ENABLED"
      Targets:
        - Arn: !GetAtt AmiCleanupLambda.Arn
          Id: "EC2SnapshotsCleanupTarget"

  PermissionForEventToInvokeLambda:
    Type: AWS::Lambda::Permission
    DeletionPolicy: !Ref RetentionPolicy
    Properties:
      Action: "lambda:InvokeFunction"
      FunctionName: !Ref AmiCleanupLambda
      Principal: "events.amazonaws.com"
      SourceArn: !GetAtt PeriodicTrigger.Arn